/**
 * 7-Segment Decoder for DisplayCounter
 * Student ID: 201890722
 */
CHIP DecoderSegment201890722 {
    IN A, B, C, D;  // 输入引脚（大写）
    OUT a, b, c, d, e, f, g;

    PARTS:
    // ===== 输入反向信号 =====
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);  // 修正为 notC
    Not(in=D, out=notD);

    // ===== Segment a (Top) =====
    And(a=notA, b=notB, c=notC, d=D, out=a1);  // 第11行：修正 c=notC
    And(a=notA, b=B, c=notC, d=notD, out=a2);
    Or(a=a1, b=a2, out=a);

    // ===== Segment b (Upper-right) =====
    Or(a=C, b=notD, out=b1);                  // 使用大写的 C
    Or(a=notB, b=A, out=b2);
    And(a=b1, b=B, out=b3);
    Or(a=C, b=b2, out=b4);                    // 使用大写的 C
    Or(a=notD, b=A, out=b5);
    And(a=b3, b=b4, out=b6);
    And(a=b6, b=b5, out=b);

    // ===== Segment c (Lower-right) =====
    And(a=notB, b=C, out=c1);                 // 使用大写的 C
    And(a=C, b=notD, out=c2);                 // 使用大写的 C
    And(a=A, b=notB, out=c3);
    And(a=A, b=D, out=c4);
    And(a=notC, b=notA, out=c5);
    And(a=B, b=c5, out=c6);
    Or(a=c1, b=c2, out=c7);
    Or(a=c3, b=c4, out=c8);
    Or(a=c7, b=c8, out=c9);
    Or(a=c9, b=c6, out=c);  // 输出小写的 c

    // ===== 其他段代码保持不变 =====
    // ...（确保所有 C 均大写，notC 正确引用）
}